{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9c6db464",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INPUT:\n",
      "  Rectangle: 0.353 × 0.626\n",
      "  Strut width: 0.06\n",
      "\n",
      "CALCULATED:\n",
      "  Radius: 0.150000\n",
      "  Arc angle: 179°\n",
      "  Chord: 0.299989\n",
      "  Sagitta: 0.148691\n",
      "  X arm: 0.026506\n",
      "  Y arm: 0.447309\n",
      "  Arc length: 0.468621\n",
      "\n",
      "VERIFICATION:\n",
      "  Height check: 0.626000 = 0.626 ✓\n",
      "  Width check: 0.353000 = 0.353 ✓\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_arc_geometry(rect_height, rect_width, strut_width):\n",
    "    \"\"\"\n",
    "    Calculate chord and sagitta from rectangle dimensions and strut width\n",
    "    \n",
    "    Input parameters:\n",
    "    - rect_height: Height of rectangle\n",
    "    - rect_width: Width of rectangle  \n",
    "    - strut_width: Width of strut\n",
    "    \n",
    "    Constraints:\n",
    "    - radius = 2.5 × strut_width\n",
    "    - height = sagitta + strut_width/2 + Y_arm\n",
    "    - width = chord + 2 × X_arm\n",
    "    \n",
    "    Returns:\n",
    "    - Dictionary with all calculated values\n",
    "    \"\"\"\n",
    "    \n",
    "    # Calculate radius from strut width constraint\n",
    "    radius = 2.5 * strut_width\n",
    "    \n",
    "    # Find the arc angle that gives the most balanced solution\n",
    "    valid_solutions = []\n",
    "    \n",
    "    for angle_deg in range(1, 180):\n",
    "        angle_rad = math.radians(angle_deg)\n",
    "        half_angle = angle_rad / 2\n",
    "        \n",
    "        # Calculate chord and sagitta for this angle\n",
    "        chord = 2 * radius * math.sin(half_angle)\n",
    "        sagitta = radius * (1 - math.cos(half_angle))\n",
    "        \n",
    "        # Calculate required arm dimensions\n",
    "        Y_arm = rect_height - sagitta - strut_width/2\n",
    "        X_arm = (rect_width - chord) / 2\n",
    "        \n",
    "        # Check if solution is physically valid (positive arms)\n",
    "        if Y_arm >= 0 and X_arm >= 0:\n",
    "            arc_length = radius * angle_rad\n",
    "            \n",
    "            # Score solution based on how balanced the arms are and arc usage\n",
    "            arm_ratio = min(X_arm, Y_arm) / max(X_arm, Y_arm) if max(X_arm, Y_arm) > 0 else 0\n",
    "            arc_usage = sagitta / radius  # How much of the radius is used\n",
    "            \n",
    "            solution = {\n",
    "                'radius': radius,\n",
    "                'arc_angle_deg': angle_deg,\n",
    "                'chord': chord,\n",
    "                'sagitta': sagitta,\n",
    "                'X_arm': X_arm,\n",
    "                'Y_arm': Y_arm,\n",
    "                'arc_length': arc_length,\n",
    "                'rect_height': rect_height,\n",
    "                'rect_width': rect_width,\n",
    "                'strut_width': strut_width,\n",
    "                'score': arc_usage  # Prefer solutions with higher arc usage\n",
    "            }\n",
    "            valid_solutions.append(solution)\n",
    "    \n",
    "    if valid_solutions:\n",
    "        # Return the solution with highest arc usage (largest sagitta relative to radius)\n",
    "        best_solution = max(valid_solutions, key=lambda x: x['score'])\n",
    "        del best_solution['score']  # Remove internal scoring\n",
    "        return best_solution\n",
    "    \n",
    "    return {'error': 'No valid solution found'}\n",
    "\n",
    "# =============================================================================\n",
    "# USAGE EXAMPLE\n",
    "# =============================================================================\n",
    "\n",
    "# Input your values here:\n",
    "rect_height = 0.626\n",
    "rect_width = 0.353\n",
    "strut_width = 0.06\n",
    "\n",
    "# Calculate results\n",
    "result = calculate_arc_geometry(rect_height, rect_width, strut_width)\n",
    "\n",
    "if 'error' not in result:\n",
    "    print(\"INPUT:\")\n",
    "    print(f\"  Rectangle: {result['rect_width']} × {result['rect_height']}\")\n",
    "    print(f\"  Strut width: {result['strut_width']}\")\n",
    "    \n",
    "    print(\"\\nCALCULATED:\")\n",
    "    print(f\"  Radius: {result['radius']:.6f}\")\n",
    "    print(f\"  Arc angle: {result['arc_angle_deg']}°\")\n",
    "    print(f\"  Chord: {result['chord']:.6f}\")\n",
    "    print(f\"  Sagitta: {result['sagitta']:.6f}\")\n",
    "    print(f\"  X arm: {result['X_arm']:.6f}\")\n",
    "    print(f\"  Y arm: {result['Y_arm']:.6f}\")\n",
    "    print(f\"  Arc length: {result['arc_length']:.6f}\")\n",
    "    \n",
    "    print(\"\\nVERIFICATION:\")\n",
    "    calc_height = result['sagitta'] + result['strut_width']/2 + result['Y_arm']\n",
    "    calc_width = result['chord'] + 2 * result['X_arm']\n",
    "    print(f\"  Height check: {calc_height:.6f} = {result['rect_height']} ✓\")\n",
    "    print(f\"  Width check: {calc_width:.6f} = {result['rect_width']} ✓\")\n",
    "else:\n",
    "    print(\"Error:\", result['error'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "349f0cd3",
   "metadata": {},
   "source": [
    "# Arc Geometry Calculator\n",
    "\n",
    "## Quick Usage\n",
    "\n",
    "Simply modify the three input values in the cell above and run it to get:\n",
    "- **Chord length**\n",
    "- **Sagitta** \n",
    "- **Arc angle**\n",
    "- **Arm dimensions (X_arm, Y_arm)**\n",
    "\n",
    "## Formulas Used\n",
    "\n",
    "Given constraints:\n",
    "- `radius = 2.5 × strut_width`\n",
    "- `rectangle_height = sagitta + strut_width/2 + Y_arm`\n",
    "- `rectangle_width = chord + 2 × X_arm`\n",
    "\n",
    "Arc formulas:\n",
    "- `chord = 2R sin(θ/2)`\n",
    "- `sagitta = R(1 - cos(θ/2))`\n",
    "\n",
    "Where θ is the arc angle and R is the radius."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}


